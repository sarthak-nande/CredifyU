"use strict";
/*
 * Copyright 2025 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFileHandlers = processFileHandlers;
function normalizeUrl(url, startUrl, scopeUrl) {
    try {
        const absoluteUrl = new URL(url, startUrl);
        if (absoluteUrl.protocol !== 'https:') {
            console.warn('Ignoring url with illegal scheme:', absoluteUrl.toString());
            return;
        }
        if (absoluteUrl.origin != scopeUrl.origin) {
            console.warn('Ignoring url with invalid origin:', absoluteUrl.toString());
            return;
        }
        if (!absoluteUrl.pathname.startsWith(scopeUrl.pathname)) {
            console.warn('Ignoring url not within manifest scope: ', absoluteUrl.toString());
            return;
        }
        return absoluteUrl.toString();
    }
    catch (error) {
        console.warn('Ignoring invalid url:', url);
    }
}
function processFileHandlers(fileHandlers, startUrl, scopeUrl) {
    const processedFileHandlers = [];
    for (const handler of fileHandlers) {
        if (!handler.action || !handler.accept)
            continue;
        const actionUrl = normalizeUrl(handler.action, startUrl, scopeUrl);
        if (!actionUrl)
            continue;
        const mimeTypes = Object.keys(handler.accept);
        if (mimeTypes.length == 0)
            continue;
        const processedHandler = {
            actionUrl,
            mimeTypes,
        };
        processedFileHandlers.push(processedHandler);
    }
    return processedFileHandlers;
}
